{"version":3,"sources":["components/Common.module.css","serviceWorker.js","components/SettingBlock/Input.jsx","components/Redux/counterReducer.js","components/SettingBlock/SettingDisplay.jsx","components/Common/Button.jsx","components/SettingBlock/SettingButtonContainer.jsx","components/SettingBlock/SettingBlock.jsx","components/Counter/Display.jsx","components/Counter/ButtonsContainer.jsx","components/Counter/Counter.jsx","App.js","components/Redux/redux-store.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Input","props","classForInput","newMinValue","newMaxValue","s","input","error","className","inputWrapper","inputText","title","onChange","e","newValue","currentTarget","value","setValue","addNewValue","type","initialState","count","minValue","maxValue","disabled","addCount","deleteCount","connect","state","counter","setNewMaxValue","setNewMinValue","displayOuter","onClick","button","setNewValues","buttonsOuter","SettingBlock","wrapper","classForNum","num","incValue","enterText","Counter","App","outer","React","Component","reducers","combineReducers","action","store","createStore","rerender","ReactDOM","render","document","getElementById","subscribe","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.58bdd5eb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"outer\":\"Common_outer__2Ujsw\",\"wrapper\":\"Common_wrapper__mZlDd\",\"displayOuter\":\"Common_displayOuter__1ygou\",\"num\":\"Common_num__3Kcgj\",\"error\":\"Common_error__mzXHU\",\"buttonsOuter\":\"Common_buttonsOuter__3TRH8\",\"button\":\"Common_button__1yLIx\",\"inputWrapper\":\"Common_inputWrapper__AY-Mi\",\"input\":\"Common_input__1dtDH\",\"inputText\":\"Common_inputText__2cbqn\",\"incValue\":\"Common_incValue__315fH\",\"enterText\":\"Common_enterText__1IZjQ\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\nimport s from '../Common.module.css'\r\n\r\nconst Input = (props) => {\r\n\r\n    const addNewValue = (e) => {\r\n        let newValue = +e.currentTarget.value;\r\n        props.setValue(newValue)\r\n    };\r\n    const error = ( props.newMinValue < 0\r\n        || props.newMaxValue === props.newMinValue || props.newMinValue > props.newMaxValue);\r\n    const classForInput = error ? s.input + ' ' + s.error : s.input;\r\n\r\n    return (\r\n        <div className={s.inputWrapper}>\r\n            <div className={s.inputText}>{props.title}:</div>\r\n            <div><input onChange={(e) => addNewValue(e)} className={classForInput} type=\"number\" value={props.value}/></div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Input","const ADD_COUNT = 'ADD_COUNT';\r\nconst DELETE_COUNT = 'DELETE_COUNT';\r\nconst SET_NEW_MAX_VALUE = 'SET_NEW_MAX_VALUE';\r\nconst SET_NEW_MIN_VALUE = 'SET_NEW_MIN_VALUE';\r\nconst SET_NEW_VALUES = 'SET_NEW_VALUES';\r\n\r\n\r\nlet initialState = {\r\n    count: 0,\r\n    minValue: 0,\r\n    maxValue: 5,\r\n    newMinValue: 0,\r\n    newMaxValue: 5,\r\n    disabled: true\r\n};\r\n\r\nexport const counterReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_COUNT:\r\n            if (state.count < state.maxValue)\r\n                return {\r\n                    ...state,\r\n                    count: state.count + 1\r\n                };\r\n            return {\r\n                ...state,\r\n                count: state.maxValue\r\n            };\r\n\r\n        case DELETE_COUNT:\r\n            return {\r\n                ...state,\r\n                count: state.minValue\r\n            };\r\n        case SET_NEW_MAX_VALUE:\r\n            return {\r\n                ...state,\r\n                newMaxValue: action.newValue,\r\n                disabled: false\r\n            };\r\n        case SET_NEW_MIN_VALUE:\r\n            return {\r\n                ...state,\r\n                newMinValue: action.newValue,\r\n                disabled: false\r\n            };\r\n        case SET_NEW_VALUES:\r\n            return {\r\n                ...state,\r\n                count: state.newMinValue,\r\n                minValue: state.newMinValue,\r\n                maxValue: state.newMaxValue,\r\n                disabled: true\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const addCount = () => {\r\n    return {type: ADD_COUNT}\r\n};\r\n\r\nexport const deleteCount = () => {\r\n    return {type: DELETE_COUNT}\r\n};\r\n\r\nexport const setNewMaxValue = (newValue) => {\r\n    return {type: SET_NEW_MAX_VALUE, newValue}\r\n};\r\n\r\nexport const setNewMinValue = (newValue) => {\r\n    return {type: SET_NEW_MIN_VALUE, newValue}\r\n};\r\n\r\nexport const setNewValues = () => {\r\nreturn {type: SET_NEW_VALUES}\r\n};\r\n\r\n","import React from 'react'\r\nimport Input from \"./Input\";\r\nimport s from '../Common.module.css'\r\nimport {connect} from \"react-redux\";\r\nimport {setNewMaxValue, setNewMinValue} from \"../Redux/counterReducer\";\r\n\r\n\r\n\r\nconst SettingDisplay = (props) => {\r\n    return (\r\n        <div className={s.displayOuter}>\r\n            <Input title='max value' newMaxValue={props.newMaxValue}  newMinValue={props.newMinValue} setValue={props.setNewMaxValue}\r\n                   value={props.newMaxValue} />\r\n            <Input title='min value' newMaxValue={props.newMaxValue}  newMinValue={props.newMinValue}  setValue={props.setNewMinValue}\r\n                   value={props.newMinValue} />\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        newMaxValue: state.counter.newMaxValue,\r\n        newMinValue: state.counter.newMinValue\r\n    }\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, {setNewMaxValue, setNewMinValue})(SettingDisplay)","import React from 'react'\r\nimport s from '../Common.module.css'\r\nimport {connect} from \"react-redux\";\r\n\r\nconst Button = (props) => {\r\n    const error = (props.newMinValue < 0\r\n        || props.newMaxValue === props.newMinValue || props.newMinValue > props.newMaxValue);\r\n    const disabled = props.title === 'Set' ? props.disabled || error : !props.disabled || error\r\n        || (props.title === 'inc' && props.count === props.maxValue);\r\n\r\n       return (\r\n        <div>\r\n            <button disabled={disabled}  onClick={props.onClick} className={s.button}>{props.title}</button>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        disabled: state.counter.disabled,\r\n        newMaxValue: state.counter.newMaxValue,\r\n        newMinValue: state.counter.newMinValue,\r\n        count: state.counter.count,\r\n        maxValue: state.counter.maxValue\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(Button)","import React from 'react'\r\nimport s from '../Common.module.css'\r\nimport Button from \"../Common/Button\";\r\nimport {addCount, deleteCount, setNewValues} from \"../Redux/counterReducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst SettingButtonsContainer = (props) => {\r\n    return (\r\n        <div className={s.buttonsOuter}>\r\n            <Button title='Set' onClick={props.setNewValues}/>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default connect(null, {setNewValues, addCount,  deleteCount})(SettingButtonsContainer)","import React from 'react'\r\nimport s from '../Common.module.css'\r\nimport SettingDisplay from \"./SettingDisplay\";\r\nimport SettingButtonsContainer from \"./SettingButtonContainer\";\r\n\r\nconst SettingBlock = () => {\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <SettingDisplay />\r\n            <SettingButtonsContainer  />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SettingBlock\r\n\r\n","import React from 'react'\r\nimport s from '../Common.module.css'\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst Display = (props) => {\r\n    const classForNum = (props.count === props.maxValue) ? s.num + ' ' + s.error : s.num;\r\n    const error = (props.newMaxValue < 0 || props.newMinValue < 0\r\n        || props.newMaxValue === props.newMinValue || props.newMinValue > props.newMaxValue);\r\n    return (\r\n        <div className={`${s.displayOuter} ${s.num}`}>\r\n            {(error && <div className={s.incValue}>Incorrect value!</div>)\r\n                || (!props.disabled && <div className={s.enterText}>enter values and press 'set' </div> )\r\n                || (<div className={classForNum}>{props.count}</div>)\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        count: state.counter.count,\r\n        maxValue: state.counter.maxValue,\r\n        newMaxValue: state.counter.newMaxValue,\r\n        newMinValue: state.counter.newMinValue,\r\n        disabled: state.counter.disabled\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(Display)","import React from 'react'\r\nimport s from '../Common.module.css'\r\nimport Button from \"../Common/Button\";\r\nimport {addCount, deleteCount} from \"../Redux/counterReducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst ButtonsContainer = (props) => {\r\n       return (\r\n        <div className={s.buttonsOuter}>\r\n            <Button title='inc' onClick={props.addCount} />\r\n            <Button title='reset' onClick={props.deleteCount} />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default connect(null, {addCount, deleteCount})(ButtonsContainer)","import React from 'react'\r\nimport s from '../Common.module.css'\r\nimport Display from \"./Display\";\r\nimport ButtonsContainer from \"./ButtonsContainer\";\r\n\r\nconst Counter = () => {\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <Display />\r\n            <ButtonsContainer />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Counter","import React from 'react';\r\nimport s from './components/Common.module.css';\r\nimport SettingBlock from \"./components/SettingBlock/SettingBlock\";\r\nimport Counter from \"./components/Counter/Counter\";\r\n\r\nclass App extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className={s.outer}>\r\n                <SettingBlock  />\r\n                <Counter />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import {combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./counterReducer\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n       counter: counterReducer\r\n});\r\n\r\nlet store = createStore(reducers);\r\n\r\nwindow.store = store;\r\nexport default store\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./App\";\nimport {Provider} from \"react-redux\";\nimport store from './components/Redux/redux-store'\n\n\nlet rerender = () => {ReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'))};\n\nrerender();\nstore.subscribe(rerender);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}